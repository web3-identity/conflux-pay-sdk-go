/*
Rainbow-API

Conflux-Pay API documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package confluxpay

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type CmbApi interface {

	/*
	AddUnitAccount Add a unit account

	Add a unit account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddUnitAccountRequest
	*/
	AddUnitAccount(ctx context.Context) ApiAddUnitAccountRequest

	// AddUnitAccountExecute executes the request
	//  @return ControllersAddUnitAccountResult
	AddUnitAccountExecute(r ApiAddUnitAccountRequest) (*ControllersAddUnitAccountResult, *http.Response, error)

	/*
	QueryHistoryCmbRecords 查询历史交易

	查询历史交易

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryHistoryCmbRecordsRequest
	*/
	QueryHistoryCmbRecords(ctx context.Context) ApiQueryHistoryCmbRecordsRequest

	// QueryHistoryCmbRecordsExecute executes the request
	//  @return []ModelsCmbRecord
	QueryHistoryCmbRecordsExecute(r ApiQueryHistoryCmbRecordsRequest) ([]ModelsCmbRecord, *http.Response, error)

	/*
	QueryRecentCmbRecords 查询昨天和今天汇入的交易

	查询昨天和今天汇入的交易

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQueryRecentCmbRecordsRequest
	*/
	QueryRecentCmbRecords(ctx context.Context) ApiQueryRecentCmbRecordsRequest

	// QueryRecentCmbRecordsExecute executes the request
	//  @return []ModelsCmbRecord
	QueryRecentCmbRecordsExecute(r ApiQueryRecentCmbRecordsRequest) ([]ModelsCmbRecord, *http.Response, error)

	/*
	SetUnitAccountRelation Set a related bank account of a unit account

	Set a related bank account of a unit account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetUnitAccountRelationRequest
	*/
	SetUnitAccountRelation(ctx context.Context) ApiSetUnitAccountRelationRequest

	// SetUnitAccountRelationExecute executes the request
	//  @return ControllersSetUnitAccountRelationResult
	SetUnitAccountRelationExecute(r ApiSetUnitAccountRelationRequest) (*ControllersSetUnitAccountRelationResult, *http.Response, error)
}

// CmbApiService CmbApi service
type CmbApiService service

type ApiAddUnitAccountRequest struct {
	ctx context.Context
	ApiService CmbApi
	addUnitAccountReq *ControllersAddUnitAccountReq
}

// add_unit_account_req
func (r ApiAddUnitAccountRequest) AddUnitAccountReq(addUnitAccountReq ControllersAddUnitAccountReq) ApiAddUnitAccountRequest {
	r.addUnitAccountReq = &addUnitAccountReq
	return r
}

func (r ApiAddUnitAccountRequest) Execute() (*ControllersAddUnitAccountResult, *http.Response, error) {
	return r.ApiService.AddUnitAccountExecute(r)
}

/*
AddUnitAccount Add a unit account

Add a unit account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddUnitAccountRequest
*/
func (a *CmbApiService) AddUnitAccount(ctx context.Context) ApiAddUnitAccountRequest {
	return ApiAddUnitAccountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ControllersAddUnitAccountResult
func (a *CmbApiService) AddUnitAccountExecute(r ApiAddUnitAccountRequest) (*ControllersAddUnitAccountResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ControllersAddUnitAccountResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CmbApiService.AddUnitAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cmb/unit-account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addUnitAccountReq == nil {
		return localVarReturnValue, nil, reportError("addUnitAccountReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addUnitAccountReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CnsErrorsRainbowErrorDetailInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CnsErrorsRainbowErrorDetailInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryHistoryCmbRecordsRequest struct {
	ctx context.Context
	ApiService CmbApi
	limit *int32
	offset *int32
	unitAccountNbr *string
	transactionDate *string
	transactionDirection *string
}

// limit
func (r ApiQueryHistoryCmbRecordsRequest) Limit(limit int32) ApiQueryHistoryCmbRecordsRequest {
	r.limit = &limit
	return r
}

// offset
func (r ApiQueryHistoryCmbRecordsRequest) Offset(offset int32) ApiQueryHistoryCmbRecordsRequest {
	r.offset = &offset
	return r
}

// specified unit account number
func (r ApiQueryHistoryCmbRecordsRequest) UnitAccountNbr(unitAccountNbr string) ApiQueryHistoryCmbRecordsRequest {
	r.unitAccountNbr = &unitAccountNbr
	return r
}

// specified date, e.g. 20230523
func (r ApiQueryHistoryCmbRecordsRequest) TransactionDate(transactionDate string) ApiQueryHistoryCmbRecordsRequest {
	r.transactionDate = &transactionDate
	return r
}

// transaction direction, C for recieve and D for out
func (r ApiQueryHistoryCmbRecordsRequest) TransactionDirection(transactionDirection string) ApiQueryHistoryCmbRecordsRequest {
	r.transactionDirection = &transactionDirection
	return r
}

func (r ApiQueryHistoryCmbRecordsRequest) Execute() ([]ModelsCmbRecord, *http.Response, error) {
	return r.ApiService.QueryHistoryCmbRecordsExecute(r)
}

/*
QueryHistoryCmbRecords 查询历史交易

查询历史交易

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryHistoryCmbRecordsRequest
*/
func (a *CmbApiService) QueryHistoryCmbRecords(ctx context.Context) ApiQueryHistoryCmbRecordsRequest {
	return ApiQueryHistoryCmbRecordsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsCmbRecord
func (a *CmbApiService) QueryHistoryCmbRecordsExecute(r ApiQueryHistoryCmbRecordsRequest) ([]ModelsCmbRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsCmbRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CmbApiService.QueryHistoryCmbRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cmb/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.limit == nil {
		return localVarReturnValue, nil, reportError("limit is required and must be specified")
	}
	if r.offset == nil {
		return localVarReturnValue, nil, reportError("offset is required and must be specified")
	}
	if r.unitAccountNbr == nil {
		return localVarReturnValue, nil, reportError("unitAccountNbr is required and must be specified")
	}
	if r.transactionDate == nil {
		return localVarReturnValue, nil, reportError("transactionDate is required and must be specified")
	}
	if r.transactionDirection == nil {
		return localVarReturnValue, nil, reportError("transactionDirection is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "unit_account_nbr", r.unitAccountNbr, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "transaction_date", r.transactionDate, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "transaction_direction", r.transactionDirection, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CnsErrorsRainbowErrorDetailInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CnsErrorsRainbowErrorDetailInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryRecentCmbRecordsRequest struct {
	ctx context.Context
	ApiService CmbApi
	limit *int32
	offset *int32
}

// limit
func (r ApiQueryRecentCmbRecordsRequest) Limit(limit int32) ApiQueryRecentCmbRecordsRequest {
	r.limit = &limit
	return r
}

// offset
func (r ApiQueryRecentCmbRecordsRequest) Offset(offset int32) ApiQueryRecentCmbRecordsRequest {
	r.offset = &offset
	return r
}

func (r ApiQueryRecentCmbRecordsRequest) Execute() ([]ModelsCmbRecord, *http.Response, error) {
	return r.ApiService.QueryRecentCmbRecordsExecute(r)
}

/*
QueryRecentCmbRecords 查询昨天和今天汇入的交易

查询昨天和今天汇入的交易

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryRecentCmbRecordsRequest
*/
func (a *CmbApiService) QueryRecentCmbRecords(ctx context.Context) ApiQueryRecentCmbRecordsRequest {
	return ApiQueryRecentCmbRecordsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsCmbRecord
func (a *CmbApiService) QueryRecentCmbRecordsExecute(r ApiQueryRecentCmbRecordsRequest) ([]ModelsCmbRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsCmbRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CmbApiService.QueryRecentCmbRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cmb/history/recent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.limit == nil {
		return localVarReturnValue, nil, reportError("limit is required and must be specified")
	}
	if r.offset == nil {
		return localVarReturnValue, nil, reportError("offset is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CnsErrorsRainbowErrorDetailInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CnsErrorsRainbowErrorDetailInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetUnitAccountRelationRequest struct {
	ctx context.Context
	ApiService CmbApi
	setUnitAccountRelationReq *ControllersSetUnitAccountRelationReq
}

// set_unit_account_relation_req
func (r ApiSetUnitAccountRelationRequest) SetUnitAccountRelationReq(setUnitAccountRelationReq ControllersSetUnitAccountRelationReq) ApiSetUnitAccountRelationRequest {
	r.setUnitAccountRelationReq = &setUnitAccountRelationReq
	return r
}

func (r ApiSetUnitAccountRelationRequest) Execute() (*ControllersSetUnitAccountRelationResult, *http.Response, error) {
	return r.ApiService.SetUnitAccountRelationExecute(r)
}

/*
SetUnitAccountRelation Set a related bank account of a unit account

Set a related bank account of a unit account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetUnitAccountRelationRequest
*/
func (a *CmbApiService) SetUnitAccountRelation(ctx context.Context) ApiSetUnitAccountRelationRequest {
	return ApiSetUnitAccountRelationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ControllersSetUnitAccountRelationResult
func (a *CmbApiService) SetUnitAccountRelationExecute(r ApiSetUnitAccountRelationRequest) (*ControllersSetUnitAccountRelationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ControllersSetUnitAccountRelationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CmbApiService.SetUnitAccountRelation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cmb/unit-account/relation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setUnitAccountRelationReq == nil {
		return localVarReturnValue, nil, reportError("setUnitAccountRelationReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setUnitAccountRelationReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CnsErrorsRainbowErrorDetailInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v CnsErrorsRainbowErrorDetailInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
